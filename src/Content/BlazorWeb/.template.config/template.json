{
  "$schema": "https://json.schemastore.org/template",
  "author": "Masa",
  "classifications": [
    "Web",
    "Blazor",
    "WebAssembly",
    "Masa"
  ],
  "identity": "Masa.Blazor.WebApp.Template",
  "name": "Masa Blazor Web App",
  "description": "A project template for creating a Blazor web app that supports both server-side rendering and client interactivity. This template can be used for web apps with rich dynamic user interfaces (UIs).",
  "shortName": "masablazor",
  "sourceName": "BlazorWebApp",
  "defaultName": "MasaBlazorApp",
  "guids": [
    "4C26868E-5E7C-458D-82E3-040509D0C71F",
    "5990939C-7E7B-4CFA-86FF-44CA5756498A",
    "650B3CE7-2E93-4CC4-9F46-466686815EAA",
    "53bc9b9d-9d6a-45d4-8429-2a2761773502"
  ],
  "preferNameDirectory": true,
  "primaryOutputs": [
    {
      "condition": "(UseWebAssembly && (HostIdentifier == \"dotnetcli\" || HostIdentifier == \"dotnetcli-preview\"))",
      "path": "BlazorWebApp.sln"
    },
    {
      "condition": "(UseWebAssembly && HostIdentifier != \"dotnetcli\" && HostIdentifier != \"dotnetcli-preview\")",
      "path": "BlazorWebApp/BlazorWebApp.csproj"
    },
    {
      "condition": "(!UseWebAssembly)",
      "path": "BlazorWebApp.csproj"
    },
    {
      "condition": "(UseWebAssembly && HostIdentifier != \"dotnetcli\" && HostIdentifier != \"dotnetcli-preview\")",
      "path": "BlazorWebApp.Client/BlazorWebApp.Client.csproj"
    }
  ],
  "sources": [
    {
      "source": "./",
      "target": "./",
      "exclude": [
        ".template.config/**"
      ],
      "copyOnly": [
        "**/wwwroot/bootstrap/**"
      ],
      "modifiers": [
        {
          "condition": "(useCDN)",
          "exclude": [
            "wwwroot/css/fontawesome/**",
            "wwwroot/css/material/**",
            "wwwroot/css/materialdesign/**"
          ]
        },
        {
          "condition": "(!UseWebAssembly)",
          "exclude": [
            "BlazorWebApp.Client/**",
            "*.sln"
          ],
          "rename": {
            "BlazorWebApp/": "./"
          }
        },
        {
          "condition": "(UseWebAssembly && InteractiveAtRoot)",
          "rename": {
            "BlazorWebApp/Components/Layout/": "./BlazorWebApp.Client/Layout/",
            "BlazorWebApp/Components/Pages/Home.razor": "./BlazorWebApp.Client/Pages/Home.razor",
            "BlazorWebApp/Components/Pages/Weather.razor": "./BlazorWebApp.Client/Pages/Weather.razor",
            "BlazorWebApp/Components/Routes.razor": "./BlazorWebApp.Client/Routes.razor"
          }
        },
        {
          "condition": "(UseWebAssembly && !InteractiveAtRoot)",
          "rename": {
            "BlazorWebApp/Components/Layout/NavMenu.razor": "./BlazorWebApp.Client/Layout/NavMenu.razor"
          }
        },
        {
          "condition": "(!UseProgramMain)",
          "exclude": [
            "BlazorWebApp/Program.Main.cs"
          ]
        },
        {
          "condition": "(UseProgramMain)",
          "exclude": [
            "BlazorWebApp/Program.cs"
          ],
          "rename": {
            "Program.Main.cs": "Program.cs"
          }
        },
        {
          "condition": "(!(UseServer && !UseWebAssembly))",
          "exclude": [
            "BlazorWebApp/Components/Pages/Counter.razor"
          ]
        },
        {
          "condition": "(ExcludeLaunchSettings)",
          "exclude": [
            "BlazorWebApp/Properties/launchSettings.json"
          ]
        },
        {
          "condition": "(!SampleContent)",
          "exclude": [
            "BlazorWebApp/Components/Pages/Counter.*",
            "BlazorWebApp/Components/Pages/Weather.*",
            "BlazorWebApp/Components/Layout/NavMenu.*",
            "BlazorWebApp/wwwroot/favicon.*",
            "BlazorWebApp.Client/Pages/**",
            "BlazorWebApp.Client/wwwroot/**"
          ]
        },
        {
          "condition": "(UseWebAssembly && HostIdentifier != \"dotnetcli\" && HostIdentifier != \"dotnetcli-preview\")",
          "exclude": [
            "*.sln"
          ]
        }
      ]
    }
  ],
  "symbols": {
    "useCDN": {
      "type": "parameter",
      "datatype": "bool",
      "description": "Use CDN, otherwise use the local files"
    },
    "Framework": {
      "type": "parameter",
      "description": "The target framework for the project.",
      "datatype": "choice",
      "choices": [
        {
          "choice": "net8.0",
          "description": "Target net8.0"
        }
      ],
      "replaces": "net8.0",
      "defaultValue": "net8.0"
    },
    "HostIdentifier": {
      "type": "bind",
      "binding": "HostIdentifier"
    },
    "skipRestore": {
      "type": "parameter",
      "datatype": "bool",
      "description": "If specified, skips the automatic restore of the project on create.",
      "defaultValue": "false"
    },
    "ExcludeLaunchSettings": {
      "type": "parameter",
      "datatype": "bool",
      "defaultValue": "false",
      "description": "Whether to exclude launchSettings.json from the generated template."
    },
    "kestrelHttpPort": {
      "type": "parameter",
      "datatype": "integer",
      "description": "Port number to use for the HTTP endpoint in launchSettings.json."
    },
    "kestrelHttpPortGenerated": {
      "type": "generated",
      "generator": "port",
      "parameters": {
        "low": 5000,
        "high": 5300
      }
    },
    "kestrelHttpPortReplacer": {
      "type": "generated",
      "generator": "coalesce",
      "parameters": {
        "sourceVariableName": "kestrelHttpPort",
        "fallbackVariableName": "kestrelHttpPortGenerated"
      },
      "replaces": "5500"
    },
    "kestrelHttpsPort": {
      "type": "parameter",
      "datatype": "integer",
      "description": "Port number to use for the HTTPS endpoint in launchSettings.json. This option is only applicable when the parameter no-https is not used (no-https will be ignored if Individual auth is used)."
    },
    "kestrelHttpsPortGenerated": {
      "type": "generated",
      "generator": "port",
      "parameters": {
        "low": 7000,
        "high": 7300
      }
    },
    "kestrelHttpsPortReplacer": {
      "type": "generated",
      "generator": "coalesce",
      "parameters": {
        "sourceVariableName": "kestrelHttpsPort",
        "fallbackVariableName": "kestrelHttpsPortGenerated"
      },
      "replaces": "5501"
    },
    "iisHttpPort": {
      "type": "parameter",
      "datatype": "integer",
      "description": "Port number to use for the IIS Express HTTP endpoint in launchSettings.json."
    },
    "iisHttpPortGenerated": {
      "type": "generated",
      "generator": "port"
    },
    "iisHttpPortReplacer": {
      "type": "generated",
      "generator": "coalesce",
      "parameters": {
        "sourceVariableName": "iisHttpPort",
        "fallbackVariableName": "iisHttpPortGenerated"
      },
      "replaces": "8080"
    },
    "iisHttpsPort": {
      "type": "parameter",
      "datatype": "integer",
      "description": "Port number to use for the IIS Express HTTPS endpoint in launchSettings.json. This option is only applicable when the parameter no-https is not used (no-https will be ignored if Individual auth is used)."
    },
    "iisHttpsPortGenerated": {
      "type": "generated",
      "generator": "port",
      "parameters": {
        "low": 44300,
        "high": 44399
      }
    },
    "iisHttpsPortReplacer": {
      "type": "generated",
      "generator": "coalesce",
      "parameters": {
        "sourceVariableName": "iisHttpsPort",
        "fallbackVariableName": "iisHttpsPortGenerated"
      },
      "replaces": "44300"
    },
    "InteractivityPlatform": {
      "type": "parameter",
      "datatype": "choice",
      "defaultValue": "Server",
      "displayName": "_Interactive render mode",
      "description": "Chooses which interactive render mode to use for interactive components",
      "choices": [
        {
          "choice": "None",
          "displayName": "None",
          "description": "No interactivity (static server rendering only)"
        },
        {
          "choice": "Server",
          "displayName": "Server",
          "description": "Runs on the server"
        },
        {
          "choice": "WebAssembly",
          "displayName": "WebAssembly",
          "description": "Runs in the browser using WebAssembly"
        },
        {
          "choice": "Auto",
          "displayName": "Auto (Server and WebAssembly)",
          "description": "Uses Server while downloading WebAssembly assets, then uses WebAssembly"
        }
      ]
    },
    "InteractivityLocation": {
      "type": "parameter",
      "datatype": "choice",
      "defaultValue": "InteractivePerPage",
      "displayName": "_Interactivity location",
      "description": "Chooses which components will have interactive rendering enabled",
      "isEnabled": "(InteractivityPlatform != \"None\")",
      "choices": [
        {
          "choice": "InteractivePerPage",
          "displayName": "Per page/component",
          "description": "Interactivity is applied on a per-page or per-component basis"
        },
        {
          "choice": "InteractiveGlobal",
          "displayName": "Global",
          "description": "Interactivity is applied at the root level"
        }
      ]
    },
    "UseWebAssembly": {
      "type": "computed",
      "value": "(InteractivityPlatform == \"WebAssembly\" || InteractivityPlatform == \"Auto\")"
    },
    "UseServer": {
      "type": "computed",
      "value": "(InteractivityPlatform == \"Server\" || InteractivityPlatform == \"Auto\")"
    },
    "IncludeSampleContent": {
      "type": "parameter",
      "datatype": "bool",
      "defaultValue": "true",
      "displayName": "_Include sample pages",
      "description": "Configures whether to add sample pages and styling to demonstrate basic usage patterns."
    },
    "Empty": {
      "type": "parameter",
      "datatype": "bool",
      "defaultValue": "false",
      "description": "Configures whether to omit sample pages and styling that demonstrate basic usage patterns."
    },
    "SampleContent": {
      "type": "computed",
      "value": "(((IncludeSampleContent && (HostIdentifier != \"dotnetcli\" && HostIdentifier != \"dotnetcli-preview\"))) || ((!Empty && (InteractivityPlatform != \"None\") && (HostIdentifier == \"dotnetcli\" || HostIdentifier == \"dotnetcli-preview\"))))"
    },
    "AllInteractive": {
      "type": "parameter",
      "datatype": "bool",
      "isEnabled": "(InteractivityPlatform != \"None\")",
      "defaultValue": "false",
      "displayName": "_Enable interactive rendering globally throughout the site",
      "description": "Configures whether to make every page interactive by applying an interactive render mode at the top level. If false, pages will use static server rendering by default, and can be marked interactive on a per-page or per-component basis."
    },
    "InteractiveAtRoot": {
      "type": "computed",
      "value": "(InteractivityLocation == \"InteractiveGlobal\" || AllInteractive)"
    },
    "HasHttpsProfile": {
      "type": "computed",
      "value": "(RequiresHttps || !NoHttps)"
    },
    "NoHttps": {
      "type": "parameter",
      "datatype": "bool",
      "defaultValue": "false",
      "description": "Whether to turn off HTTPS. This option only applies if Individual isn't used for --auth."
    },
    "copyrightYear": {
      "type": "generated",
      "generator": "now",
      "replaces": "copyrightYear",
      "parameters": {
        "format": "yyyy"
      }
    },
    "UseProgramMain": {
      "type": "parameter",
      "datatype": "bool",
      "defaultValue": "false",
      "displayName": "Do not use _top-level statements",
      "description": "Whether to generate an explicit Program class and Main method instead of top-level statements."
    }
  },
  "tags": {
    "language": "C#",
    "type": "project"
  },
  "postActions": [
    {
      "id": "restore",
      "condition": "(!skipRestore)",
      "description": "Restore NuGet packages required by this project.",
      "manualInstructions": [
        {
          "text": "Run 'dotnet restore'"
        }
      ],
      "actionId": "210D431B-A78B-4D2F-B762-4ED3E3EA9025",
      "continueOnError": true
    }
  ]
}
